// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/dipper-iot/dipper-engine-server/ent"
)

type InputChan struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

type InputNode struct {
	NodeID   string                 `json:"node_id"`
	RuleID   string                 `json:"rule_id"`
	Option   map[string]interface{} `json:"option"`
	Infinite *bool                  `json:"infinite"`
	Debug    *bool                  `json:"debug"`
	End      *bool                  `json:"end"`
}

type ListChan struct {
	Total int             `json:"total"`
	List  []*ent.RuleChan `json:"list"`
}

type SetStatusChan struct {
	ID     uint64     `json:"id"`
	Status ChanStatus `json:"status"`
}

type Version struct {
	Version string `json:"version"`
}

type ChanStatus string

const (
	ChanStatusActivated   ChanStatus = "Activated"
	ChanStatusDeactivated ChanStatus = "Deactivated"
)

var AllChanStatus = []ChanStatus{
	ChanStatusActivated,
	ChanStatusDeactivated,
}

func (e ChanStatus) IsValid() bool {
	switch e {
	case ChanStatusActivated, ChanStatusDeactivated:
		return true
	}
	return false
}

func (e ChanStatus) String() string {
	return string(e)
}

func (e *ChanStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChanStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChanStatus", str)
	}
	return nil
}

func (e ChanStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
